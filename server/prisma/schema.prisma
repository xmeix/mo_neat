generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// only for admin //users won't need to connect
model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String
  isAdmin    Boolean   @default(true)
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
 
}
 

model Order {
  id                 Int              @id @default(autoincrement())

  // Price information
  totalBeforeReduction Int
  totalAfterReduction  Int             @default(0)
  shippingCost         Int
  checkoutPrice        Int             // (shipping fees + total (either before or after reduction))

  // Customer information
  orderedBy            String          // Orderer's name
  orderedByPhone       String          // Orderer's phone
  address              String? 
  postalCode String? 
  
  // Delivery service information
  deliveryServiceId    Int?
  deliveryService      DeliveryService? @relation(fields: [deliveryServiceId], references: [id])
  
  deliveryAreaId       Int?             // Relation to DeliveryArea (e.g., StopDesk or Commune)
  deliveryArea         DeliveryArea?    @relation(fields: [deliveryAreaId], references: [id])


  // Status tracking
  status               Status[]        // Related statuses for the order at different times

  // Order details
  orderProducts        OrderProduct[]
 
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model DeliveryService {
  id               Int              @id @default(autoincrement())
  tmCode           String           @unique
  tmName           String           @unique
  tmDescription    String?
  isActive         Boolean          @default(true)

  deliveryAreas    DeliveryArea[]   // Linked delivery areas (e.g., StopDesks, Home Deliveries)
  orders           Order[]          // All orders linked to this delivery service

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model DeliveryArea {
  id               Int              @id @default(autoincrement())
  name             String?            // specific name for StopDesk
  address          String?          // Specific address for StopDesk or other area types
  
  communeId        Int              // Foreign key linking to the Commune
  commune          Commune          @relation(fields: [communeId], references: [id], onDelete: Cascade)

  areaType         String         // StopDesk, Home, etc.
  
  deliveryFee      Int              // Fee for delivery to this area
  isActive         Boolean          @default(true)

  deliveryServiceId Int?
  deliveryService   DeliveryService? @relation(fields: [deliveryServiceId], references: [id]) // Links to DeliveryService

  orders           Order[]          // Orders associated with this delivery area

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Commune {
  id               Int              @id @default(autoincrement())
  name             String            
  wilayaId         Int              // Foreign key linking to Wilaya
  wilaya           Wilaya           @relation(fields: [wilayaId], references: [id], onDelete: Cascade)
  postalCode       Int              @unique

  deliveryAreas    DeliveryArea[]   // All delivery areas (StopDesks, etc.) in this commune

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Wilaya {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  communes         Commune[]        // Communes within this Wilaya

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

 

 


model Status {
  id               Int              @id @default(autoincrement())
  orderStatus ORDERSTATUS @default(PENDING)
  createdAt  DateTime  @default(now())

  Orderid Int
  Order Order  @relation(fields: [Orderid], references: [id])
}



model Product {
  id               Int              @id @default(autoincrement())
  title String
  description String
  images String[]
  stock Int @default(1)
  categories Category[]
  sizes String[]
  colors String[]
  onSale Boolean @default(false)
  price_before_sale Int
  discountPercentage Int @default(0)
  enabled Boolean @default(true)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  orderProducts OrderProduct[]
}

model Category {
  id               Int              @id @default(autoincrement())
  title String @unique 

  products Product[]
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  chosenSize String 
  chosenColor String
  quantity Int @default(1)
}

model Coupon {
  id                  Int      @id @default(autoincrement())
  name                String
  code                String   @unique
  discountPercentage  Int
  description         String?
  expiryDate          DateTime
 

  isActive       Boolean   @default(true)

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

 
 
 
 
enum DeliveryType {
  HOME_DELIVERY  //in this case we need a table that contains all the commune/wilaya/delivery prices
  STOP_DESK_DELIVERY // in this case we need a table that contains all the existing stop desks for each wilaya
}

enum ORDERSTATUS {
  PENDING
  PROCESSING 
  DELIVERED
  CANCELLED
  RETURNED
}
